# importing libs and database
import numpy as np
import pandas as pd
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
x,y = make_blobs(n_samples = 500,n_features = 2,centers = 3,random_state = 23)
plt.scatter(x[:,0],x[:,1])
plt.grid()
plt.show()


# initialize the centroids
k = 3
  
clusters = {}
np.random.seed(23)
  
for idx in range(k):
  center = 2*(2*np.random.random((x.shape[1],))-1)
  points = []
  cluster = {
        'center' : center,
        'points' : []
    }
      
  clusters[idx] = cluster
clusters



# Plot the random initialize center with data points
plt.scatter(x[:,0],x[:,1])
plt.grid()
for i in clusters:
  center=clusters[i]['center']
  plt.scatter(center[0,],center[1],marker='*',c='red')
plt.show()


# define the euclidean distance
def distance(p1,p2):
    return np.sqrt(np.sum((p1-p2)**2))

#creating the function to assign and update the cluster center

#implementing the E step
def assign_cluster(x,clusters):
  for i in range(x.shape[0]):
    dist=[]
    curr_x=x[i]
    for j in range(k):
      dis=distance(curr_x,clusters[j]['center'])
      dist.append(dis)
    curr_cluster=np.argmin(dist)
    clusters[curr_cluster]['points'].append(curr_x)
  return clusters

#implementing the M step
def update_cluster(x,clusters):
  for i in range(k):
    points=np.array(clusters[i]['points'])
    if points.shape[0]>0:
      new_center=points.mean(axis=0)
      clusters[i]['center']=new_center
      clusters[i]['points']=[]
  return clusters

#function to predict the cluster for the datapoints
def pred_cluster(x,clusters):
  pred=[]
  for i in range(x.shape[0]):
    dist=[]
    for j in range(k):
      dist.append(distance(x[i],clusters[j]['center']))
    pred.append(np.argmin(dist))
  return pred

#assign, update and predict the cluster center
clusters=assign_cluster(x,clusters)
clusters=update_cluster(x,clusters)
pred=pred_cluster(x,clusters)

#plot data points with their predicted cluster center
plt.scatter(x[:,0],x[:,1],c=pred)
for i in clusters:
  center=clusters[i]['center']
  plt.scatter(center[0],center[1],marker='^',c='red')
plt.show()
